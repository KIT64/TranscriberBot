import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import pytube
import os
import re
from datetime import datetime

import transcriber
import utils
import keyboards


BOT_TOKEN = os.getenv('BOT_TOKEN')
dp = Dispatcher()

youtube_url_pattern = r'(https?\:\/\/)?(www\.)?(youtube\.com|youtu\.be)\/(watch\?v=|live\/|embed\/)?([a-zA-Z0-9_-]{11})(\S*)?'
hms_time_pattern = r'((\d)+:(\d){2}:(\d){2})'  # H/HH:MM:SS format
ms_time_pattern = r'((\d)+:(\d){2})'  # M/MM:SS format


class video_transcription_FSM(StatesGroup):
    waiting_for_youtube_url = State()
    waiting_for_start_time = State()
    waiting_for_end_time = State()


@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! üëã\n'
        '–Ø –ë–æ—Ç-—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ—Ä ü§ó\n'
        'C –ø–æ–º–æ—â—å—é –º–µ–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—Å—Ç üìù\n'
        '–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ"',
        reply_markup=keyboards.main_keyboard()
    )
    

@dp.message(F.text == '–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ')
@dp.message(F.text == '–ù–∞—á–∞—Ç—å –≤–≤–æ–¥ –∑–∞–Ω–æ–≤–æ')
async def start_video_transcription_input(message: types.Message, state: FSMContext):
    await state.set_state(video_transcription_FSM.waiting_for_youtube_url)
    await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–ª–∏–∫ –≤ YouTube',
        reply_markup=keyboards.cancel_transcription_keyboard()
    )


@dp.message(F.text == '–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≤–≤–æ–¥')
async def cancel_current_transcription_input(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        '–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω üëå',
        reply_markup=keyboards.main_keyboard()
    )


@dp.message(video_transcription_FSM.waiting_for_youtube_url)
async def youtube_url_entered(message: types.Message, state: FSMContext):
    print("youtube_url: " + message.text)
    if not re.match(youtube_url_pattern, message.text):
        await message.answer(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ä–æ–ª–∏–∫–∞ –∏–∑ YouTube üôà\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'
        )
        return
    await state.update_data(youtube_url=message.text)

    await state.set_state(video_transcription_FSM.waiting_for_start_time)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç–ø–∏–∑–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á:–º–º:—Å—Å –∏–ª–∏ –º–º:—Å—Å\n'
                         '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –Ω–∞—á–∞–ª–∞ –≤–∏–¥–µ–æ',
                         reply_markup=keyboards.skip_time_inline_keyboard())
    

@dp.callback_query(video_transcription_FSM.waiting_for_start_time, F.data == 'skip_time_input')
async def start_time_skipped(callback: types.CallbackQuery, state: FSMContext):
    print("start_time: skipped")
    await callback.answer('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç–ø–∏–∑–æ–¥–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ')
    await state.update_data(start_time=0)

    await state.set_state(video_transcription_FSM.waiting_for_end_time)
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á:–º–º:—Å—Å –∏–ª–∏ –º–º:—Å—Å"\n'
                                  '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–æ –∫–æ–Ω—Ü–∞ –≤–∏–¥–µ–æ',
                                  reply_markup=keyboards.skip_time_inline_keyboard())


@dp.message(video_transcription_FSM.waiting_for_start_time)
async def start_time_entered(message: types.Message, state: FSMContext):
    input_start_time = message.text
    print("start_time: " + input_start_time)
    if re.match(hms_time_pattern, input_start_time):
        time_object = datetime.strptime(input_start_time, '%H:%M:%S')
        start_time = time_object.hour * 3600 + time_object.minute * 60 + time_object.second
    elif re.match(ms_time_pattern, input_start_time):
        time_object = datetime.strptime(input_start_time, '%M:%S')
        start_time = time_object.minute * 60 + time_object.second
    else:
        await message.answer(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —ç–ø–∏–∑–æ–¥–∞ üôà\n'
            '–ü–æ–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ–±—ã —è c–º–æ–≥ –µ–≥–æ –ø–æ–Ω—è—Ç—å\n'
            '–Ø –ø–æ–Ω–∏–º–∞—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á:–º–º:—Å—Å –∏–ª–∏ –º–º:—Å—Å'
        )
        print("Wrong time format")
        return
    data = await state.get_data()
    video = pytube.YouTube(data.get('youtube_url'))
    if start_time > video.length:
        await message.answer(
            '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç–ø–∏–∑–æ–¥–∞ –±–æ–ª—å—à–µ, —á–µ–º –¥–ª–∏–Ω–∞ –≤—Å–µ–≥–æ –≤–∏–¥–µ–æ üò≤\n'
            '–í—ã —á—Ç–æ-—Ç–æ –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏ ü§î\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'
        )
        return
    await state.update_data(start_time=start_time)

    await state.set_state(video_transcription_FSM.waiting_for_end_time)
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á:–º–º:—Å—Å –∏–ª–∏ –º–º:—Å—Å"\n'
                         '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–æ –∫–æ–Ω—Ü–∞ –≤–∏–¥–µ–æ',
                         reply_markup=keyboards.skip_time_inline_keyboard())


@dp.callback_query(video_transcription_FSM.waiting_for_end_time, F.data == 'skip_time_input')
async def end_time_skipped(callback: types.CallbackQuery, state: FSMContext):
    print("end_time: skipped")
    await callback.answer('–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ')
    data = await state.get_data()
    youtube_url = data.get('youtube_url')
    start_time = data.get('start_time')
    video = pytube.YouTube(youtube_url)
    end_time = video.length

    await state.clear()
    await transcribe_video_and_send_to_user(callback.message, youtube_url, start_time, end_time)


@dp.message(video_transcription_FSM.waiting_for_end_time)
async def end_time_entered(message: types.Message, state: FSMContext):
    input_end_time = message.text
    print("end_time: " + input_end_time)
    if re.match(hms_time_pattern, input_end_time):
        time_object = datetime.strptime(input_end_time, '%H:%M:%S')
        end_time = time_object.hour * 3600 + time_object.minute * 60 + time_object.second
    elif re.match(ms_time_pattern, input_end_time):
        time_object = datetime.strptime(input_end_time, '%M:%S')
        end_time = time_object.minute * 60 + time_object.second
    else:
        await message.answer(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞ üôà\n'
            '–ü–æ–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ–±—ã —è c–º–æ–≥ –µ–≥–æ –ø–æ–Ω—è—Ç—å\n'
            '–Ø –ø–æ–Ω–∏–º–∞—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á:–º–º:—Å—Å –∏–ª–∏ –º–º:—Å—Å'
        )
        print("Wrong time format")
        return
    data = await state.get_data()
    youtube_url = data.get('youtube_url')
    start_time = data.get('start_time')
    video = pytube.YouTube(youtube_url)
    if end_time > video.length:
        await message.answer(
            '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞ –±–æ–ª—å—à–µ, —á–µ–º –¥–ª–∏–Ω–∞ –≤—Å–µ–≥–æ –≤–∏–¥–µ–æ üò≤\n'
            '–í—ã —á—Ç–æ-—Ç–æ –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏ ü§î\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'
        )
        return
    if start_time > end_time:
        await message.answer(
            '–•–º–º, –∫–∞–∂–µ—Ç—Å—è –í—ã —á—Ç–æ-—Ç–æ –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏ ü§î\n'
            '–£ –í–∞—Å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç–ø–∏–∑–æ–¥–∞ –æ–ø–µ—Ä–µ–∂–∞–µ—Ç –≤—Ä–µ–º—è –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è üßê'
        )
        return
    
    await state.clear()
    await transcribe_video_and_send_to_user(message, youtube_url, start_time, end_time)


async def transcribe_video_and_send_to_user(message: types.Message, video_url, start_time, end_time):
    await message.answer(
            '–°—Å—ã–ª–∫—É –ø–æ–ª—É—á–∏–ª, —Å–µ–π—á–∞—Å –≤—ã–¥–∞–º —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ üòá\n'
            '–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è ‚è≥'
    )

    try:
        mp3_file_path = utils.get_mp3_from_youtube_video(
            video_url, start_time, end_time, audio_folder_path='audio storage'
        )
    except Exception as e:
        await message.answer(
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –∏–∑ –≤–∏–¥–µ–æ üòî\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, —á—Ç–æ–±—ã –æ—à–∏–±–∫–∞ –±—ã–ª–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ üîß'
        )
        print(f'Error downloading and converting audio from youtube video: {e}')
        return
    
    try:
        transcript = transcriber.transcribe(mp3_file_path, language='ru', format='mp3')
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ—Ö–æ–∂–µ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ OpenAI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω üòí')
        return
    finally:
        os.remove(mp3_file_path)

    transcript_file_name = get_transcript_file_name(mp3_file_path)
    transcript_file_path = utils.write_transcript_to_file(
        transcript, folder_path='transcripts', file_name=transcript_file_name
    )
    await send_transcription_to_user(message, transcript_file_path)


def get_transcript_file_name(mp3_file_path):
    mp3_file_name = os.path.basename(mp3_file_path)
    transcript_file_name = os.path.splitext(mp3_file_name)[0] + '.txt'
    transcript_file_name = mp3_file_name.replace('.mp3', '.txt')
    return transcript_file_name


async def send_transcription_to_user(message: types.Message, transcript_file_path):
    with open(transcript_file_path, 'r', encoding='utf-8') as transcript_file:
        file_path = os.path.realpath(transcript_file.name)
        file_id = types.FSInputFile(file_path)
    await message.answer_document(file_id, reply_markup=keyboards.main_keyboard())
    os.remove(transcript_file_path)
    print('Transcription was successfully sent to the user')


async def main():
    bot = Bot(BOT_TOKEN)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == '__main__':
    print('Bot has been launched')
    asyncio.run(main())