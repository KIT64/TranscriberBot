from aiogram import types

import os

import utils
import transcriber
import keyboards

async def transcribe_video_and_send_to_user(message: types.Message, video_url, start_time, end_time):
    await message.answer(
        '–°—Å—ã–ª–∫—É –ø–æ–ª—É—á–∏–ª, —Å–µ–π—á–∞—Å –≤—ã–¥–∞–º —Ñ–∞–π–ª —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ üòá\n'
        '–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è ‚è≥'
    )

    try:
        mp4_file_path = utils.download_audio_from_youtube_video(
            video_url, audio_folder_path='audio storage'
        )
        print(f'Audio was successfully downloaded to {mp4_file_path}')
    except Exception as e:
        await message.answer(
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Å YouTube üòî\n'
        )
        print(f'Error downloading audio from youtube video: {e}')
        return

    try:
        mp3_file_path = utils.trim_and_convert_to_mp3(mp4_file_path, start_time, end_time)
        print(f'Audio was successfully trimmed and converted to {mp3_file_path}')
    except Exception as e:
        await message.answer(
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ üòî\n'
        )
        print(f'Error trimming and converting: {e}')

    try:
        transcript = transcriber.transcribe(mp3_file_path, language='ru', format='mp3')
        print(f'Transcription was successfully completed: {transcript}')
    except:
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ—Ö–æ–∂–µ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ OpenAI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω üòí')
        return
    finally:
        os.remove(mp3_file_path)

    transcript_file_name = get_transcript_file_name(mp3_file_path)
    transcript_file_path = utils.write_transcript_to_file(
        transcript, folder_path='transcripts', file_name=transcript_file_name
    )
    await send_transcription_to_user(message, transcript_file_path)


def get_transcript_file_name(mp3_file_path):
    mp3_file_name = os.path.basename(mp3_file_path)
    transcript_file_name = os.path.splitext(mp3_file_name)[0] + '.txt'
    transcript_file_name = mp3_file_name.replace('.mp3', '.txt')
    return transcript_file_name


async def send_transcription_to_user(message: types.Message, transcript_file_path):
    with open(transcript_file_path, 'r', encoding='utf-8') as transcript_file:
        file_path = os.path.realpath(transcript_file.name)
        file_id = types.FSInputFile(file_path)
    await message.answer_document(file_id, reply_markup=keyboards.main_keyboard())
    os.remove(transcript_file_path)
    print('Transcription was successfully sent to the user')