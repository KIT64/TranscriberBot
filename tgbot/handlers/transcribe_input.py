from aiogram import Router, types, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import pytube
import re
from datetime import datetime

import keyboards
from core import transcribe_core


router = Router()

youtube_url_pattern = r'(https?\:\/\/)?(www\.)?(youtube\.com|youtu\.be)\/(watch\?v=|live\/|embed\/)?([a-zA-Z0-9_-]{11})(\S*)?'
hms_time_pattern = r'^(\d){1,2}:(\d){2}:(\d){2}$'  # H/HH:MM:SS format
ms_time_pattern = r'^(\d){1,2}:(\d){2}$'  # M/MM:SS format


class video_transcription_FSM(StatesGroup):
    waiting_for_youtube_url = State()
    waiting_for_start_time = State()
    waiting_for_end_time = State()


@router.message(F.text == '–°–¥–µ–ª–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤–∏–¥–µ–æ')
async def start_video_transcription_input(message: types.Message, state: FSMContext):
    await state.set_state(video_transcription_FSM.waiting_for_youtube_url)
    await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–ª–∏–∫ –≤ YouTube',
        reply_markup=keyboards.cancel_input_keyboard(),
    )


@router.message(video_transcription_FSM.waiting_for_youtube_url)
async def youtube_url_entered(message: types.Message, state: FSMContext):
    print("youtube_url: " + message.text)
    if not re.match(youtube_url_pattern, message.text):
        await message.answer(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏ –¥–ª—è —Ä–æ–ª–∏–∫–∞ –∏–∑ YouTube üôà\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'
        )
        return
    await state.update_data(youtube_url=message.text)

    await state.set_state(video_transcription_FSM.waiting_for_start_time)
    await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç–ø–∏–∑–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á:–º–º:—Å—Å –∏–ª–∏ –º–º:—Å—Å\n'
        '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –Ω–∞—á–∞–ª–∞ –≤–∏–¥–µ–æ',
        reply_markup=keyboards.skip_time_inline_keyboard(),
    )


@router.callback_query(video_transcription_FSM.waiting_for_start_time, F.data == 'skip_time_input')
async def start_time_skipped(callback: types.CallbackQuery, state: FSMContext):
    print("start_time: skipped")
    await callback.answer('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç–ø–∏–∑–æ–¥–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ')
    await state.update_data(start_time=None)

    await state.set_state(video_transcription_FSM.waiting_for_end_time)
    await callback.message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á:–º–º:—Å—Å –∏–ª–∏ –º–º:—Å—Å"\n'
        '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–æ –∫–æ–Ω—Ü–∞ –≤–∏–¥–µ–æ',
        reply_markup=keyboards.skip_time_inline_keyboard(),
    )


@router.message(video_transcription_FSM.waiting_for_start_time)
async def start_time_entered(message: types.Message, state: FSMContext):
    input_start_time = message.text
    print("start_time: " + input_start_time)
    if re.match(hms_time_pattern, input_start_time):
        try:
            time_object = datetime.strptime(input_start_time, '%H:%M:%S')
            start_time = time_object.hour * 3600 + time_object.minute * 60 + time_object.second
        except Exception as e:
            await message.answer(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å, —á—Ç–æ –≤ —á–∞—Å–∞—Ö –≤—Å—ë –µ—â—ë 60 –º–∏–Ω—É—Ç, –∞ –≤ –º–∏–Ω—É—Ç–µ 60 —Å–µ–∫—É–Ω–¥ üßê\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'
            )
            print(f"Error converting input start_time: {e}")
            return
    elif re.match(ms_time_pattern, input_start_time):
        try:
            time_object = datetime.strptime(input_start_time, '%M:%S')
            start_time = time_object.minute * 60 + time_object.second
        except Exception as e:
            await message.answer(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å, —á—Ç–æ –≤ –º–∏–Ω—É—Ç–∞—Ö –≤—Å—ë –µ—â—ë 60 —Å–µ–∫—É–Ω–¥ üßê\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'
            )
            print(f"Error converting input start_time: {e}")
            return
    else:
        await message.answer(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ —ç–ø–∏–∑–æ–¥–∞ üôà\n'
            '–Ø –ø–æ–Ω–∏–º–∞—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á:–º–º:—Å—Å –∏–ª–∏ –º–º:—Å—Å\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'
        )
        print("Wrong time format")
        return
    data = await state.get_data()
    video = pytube.YouTube(data.get('youtube_url'))
    if start_time > video.length:
        await message.answer(
            '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç–ø–∏–∑–æ–¥–∞ –±–æ–ª—å—à–µ, —á–µ–º –¥–ª–∏–Ω–∞ –≤—Å–µ–≥–æ –≤–∏–¥–µ–æ üò≤\n'
            '–í—ã —á—Ç–æ-—Ç–æ –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏ ü§î\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'
        )
        return
    await state.update_data(start_time=start_time)

    await state.set_state(video_transcription_FSM.waiting_for_end_time)
    await message.answer(
        '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á:–º–º:—Å—Å –∏–ª–∏ –º–º:—Å—Å"\n'
        '–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–æ –∫–æ–Ω—Ü–∞ –≤–∏–¥–µ–æ',
        reply_markup=keyboards.skip_time_inline_keyboard(),
    )


@router.callback_query(video_transcription_FSM.waiting_for_end_time, F.data == 'skip_time_input')
async def end_time_skipped(callback: types.CallbackQuery, state: FSMContext):
    print("end_time: skipped")
    await callback.answer('–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ')
    data = await state.get_data()
    youtube_url = data.get('youtube_url')
    start_time = data.get('start_time')
    end_time = None

    await state.clear()
    await transcribe_core.transcribe_video_and_send_to_user(callback.message, youtube_url, start_time, end_time)


@router.message(video_transcription_FSM.waiting_for_end_time)
async def end_time_entered(message: types.Message, state: FSMContext):
    input_end_time = message.text
    print("end_time: " + input_end_time)
    if re.match(hms_time_pattern, input_end_time):
        try:
            time_object = datetime.strptime(input_end_time, '%H:%M:%S')
            end_time = time_object.hour * 3600 + time_object.minute * 60 + time_object.second
        except Exception as e:
            await message.answer(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å, —á—Ç–æ –≤ —á–∞—Å–∞—Ö –≤—Å—ë –µ—â—ë 60 –º–∏–Ω—É—Ç, –∞ –≤ –º–∏–Ω—É—Ç–µ 60 —Å–µ–∫—É–Ω–¥ üßê\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'
            )
            print(f"Error converting input end_time: {e}")
            return
    elif re.match(ms_time_pattern, input_end_time):
        try:
            time_object = datetime.strptime(input_end_time, '%M:%S')
            end_time = time_object.minute * 60 + time_object.second
        except Exception as e:
            await message.answer(
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–æ—Å—Ç–æ–≤–µ—Ä—å—Ç–µ—Å—å, —á—Ç–æ –≤ –º–∏–Ω—É—Ç–∞—Ö –≤—Å—ë –µ—â—ë 60 —Å–µ–∫—É–Ω–¥ üßê\n'
                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'
            )
            print(f"Error converting input end_time: {e}")
            return
    else:
        await message.answer(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞ üôà\n'
            '–Ø –ø–æ–Ω–∏–º–∞—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —á:–º–º:—Å—Å –∏–ª–∏ –º–º:—Å—Å\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'
        )
        print("Wrong time format")
        return
    data = await state.get_data()
    youtube_url = data.get('youtube_url')
    start_time = data.get('start_time')
    video = pytube.YouTube(youtube_url)
    if end_time > video.length:
        await message.answer(
            '–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —ç–ø–∏–∑–æ–¥–∞ –±–æ–ª—å—à–µ, —á–µ–º –¥–ª–∏–Ω–∞ –≤—Å–µ–≥–æ –≤–∏–¥–µ–æ üò≤\n'
            '–í—ã —á—Ç–æ-—Ç–æ –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏ ü§î\n'
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑'
        )
        return
    if start_time is not None:
        if start_time > end_time:
            await message.answer(
                '–•–º–º, –∫–∞–∂–µ—Ç—Å—è –í—ã —á—Ç–æ-—Ç–æ –ø–µ—Ä–µ–ø—É—Ç–∞–ª–∏ ü§î\n'
                '–£ –í–∞—Å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç–ø–∏–∑–æ–¥–∞ –æ–ø–µ—Ä–µ–∂–∞–µ—Ç –≤—Ä–µ–º—è –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è üßê'
            )
            return

    await state.clear()
    await transcribe_core.transcribe_video_and_send_to_user(message, youtube_url, start_time, end_time)